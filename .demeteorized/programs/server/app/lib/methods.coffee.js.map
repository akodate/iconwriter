{"version":3,"sources":["meteor://ðŸ’»app/lib/methods.coffee"],"names":[],"mappings":";;;;;;;;;AAAA;;AAAA,MAAM,CAAC,OAAP,CAEE;EAAA,aAAa,SAAC,QAAD,EAAW,OAAX;AAEX;IAAA,IAAG,MAAM,CAAC,QAAP,IAAmB,OAAO,CAAC,GAAG,CAAC,QAAZ,KAAwB,wBAA9C;MAEE,WAAW,mBAAmB,QAAnB;MAEX,OAAO,CAAC,GAAR,CAAY,kBAAkB,QAA9B;MACA,IAAiC,OAAjC;QAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ;;MAEA,KAAK,GAAG,CAAC,OAAJ,CAAY,IAAZ;MACL,OAAO,GAAG,CAAC,OAAJ,CAAY,MAAZ;MACP,OAAO,IAAI,CAAC,OAAL,CAAa,GAAb;MACP,OAAO,CAAC,GAAR,CAAY,cAAc,IAA1B;MAEA,OAAO,EAAE,CAAC,YAAH,CAAgB,IAAhB;MACP,OAAO,CAAC,GAAR,CAAY,cAAc,IAA1B;MACA,WAAe,SAAK,GAAL,EAAU;QAAC,OAAO,KAAR;QAAe,KAAK,IAApB;OAAV,EAAqC,SAAC,GAAD,EAAM,OAAN,IAArC;MACf,OAAO,CAAC,GAAR,CAAY,QAAZ;AAEA;QACE,SAAS,EAAE,CAAC,SAAH,CAAa,OAAO,CAAC,GAAG,CAAC,SAAZ,GAAwB,sBAArC;QACT,OAAO,CAAC,GAAR,CAAY,gBAAgB,MAA5B,EAFF;OAAA;QAGM;QACJ,OAAO,CAAC,GAAR,CAAY,CAAZ,EAJF;;MAMA,oBAAoB,EAAE,CAAC,YAAH,CAAgB,OAAO,CAAC,GAAG,CAAC,SAAZ,GAAwB,sBAAxC;MACpB,OAAO,CAAC,GAAR,CAAY,2BAA2B,iBAAvC;MACA,WAAe,SAAK,GAAL,EAAU;QAAC,OAAO,KAAR;QAAe,KAAK,iBAApB;OAAV,EAAkD,SAAC,GAAD,EAAM,OAAN,IAAlD;MACf,OAAO,CAAC,GAAR,CAAY,QAAZ;MAEA,IAAG,aAAY,QAAZ,gBAAH;QACE,OAAO,CAAC,GAAR,CAAY,gDAAZ;AACA,eAFF;;MAIA,aAAa,OAAO,CAAC,KAAR,CAAc,GAAd,CAAmB;MAChC,IAAmC,UAAnC;QAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ;;MACA,SAAa,WAAO,UAAP,EAAmB,QAAnB;MACb,IAA+B,MAA/B;QAAA,OAAO,CAAC,GAAR,CAAY,eAAZ;;MAEA,eAAe,oBAAoB,GAApB,GAA0B;MACzC,OAAO,CAAC,GAAR,CAAY,wBAAwB,YAApC;MACA,EAAE,CAAC,aAAH,CAAiB,YAAjB,EAA+B,MAA/B,EAAuC,QAAvC,EAAiD,SAAC,GAAD;QAC/C,IAAa,GAAb;AAAA,gBAAM,IAAN;;eACA,OAAO,CAAC,GAAR,CAAY,qBAAZ;MAF+C,CAAjD;MAIA,oBAAoB,EAAE,CAAC,YAAH,CAAgB,OAAO,CAAC,GAAG,CAAC,SAAZ,GAAwB,sBAAxC;MACpB,OAAO,CAAC,GAAR,CAAY,+BAA+B,iBAA3C;MACA,WAAe,SAAK,GAAL,EAAU;QAAC,OAAO,KAAR;QAAe,KAAK,iBAApB;OAAV,EAAkD,SAAC,GAAD,EAAM,OAAN,IAAlD;aACf,OAAO,CAAC,GAAR,CAAY,QAAZ,EA9CF;;EAFW,CAAb;CAFF","file":"/lib/methods.coffee.js","sourcesContent":["Meteor.methods\n\n  saveDataURL: (fileName, dataUrl) ->\n\n    if Meteor.isServer && process.env.ROOT_URL != 'http://localhost:3000/'\n\n      fileName = decodeURIComponent fileName\n\n      console.log \"Filename is: \" + fileName\n      console.log \"Data URL extant\" if dataUrl\n\n      fs = Npm.require(\"fs\")\n      path = Npm.require(\"path\")\n      base = path.resolve('.')\n      console.log 'Base is: ' + base\n\n      BASE = fs.realpathSync(base)\n      console.log 'BASE is: ' + BASE\n      fileTree = new Glob('*', {debug: false, cwd: BASE}, (err, matches) -> )\n      console.log fileTree\n\n      try\n        newDir = fs.mkdirSync(process.env.CLOUD_DIR + '/iconwriter/savedimg')\n        console.log \"newDir is: \" + newDir\n      catch e\n        console.log e\n\n      __PUBLIC_FOLDER__ = fs.realpathSync(process.env.CLOUD_DIR + '/iconwriter/savedimg')\n      console.log '__PUBLIC_FOLDER__ is: ' + __PUBLIC_FOLDER__\n      fileTree = new Glob('*', {debug: false, cwd: __PUBLIC_FOLDER__}, (err, matches) -> )\n      console.log fileTree\n\n      if fileName in fileTree\n        console.log 'FILE ALREADY EXISTS - TERMINATING SAVE PROCESS'\n        return\n\n      dataString = dataUrl.split(\",\")[1]\n      console.log \"dataString extant\" if dataString\n      buffer = new Buffer(dataString, \"base64\")\n      console.log \"Buffer extant\" if buffer\n      # extension = dataUrl.match(/\\/(.*)\\;/)[1]\n      fullFileName = __PUBLIC_FOLDER__ + '/' + fileName # + \".\" + extension\n      console.log 'Full file name is: ' + fullFileName\n      fs.writeFileSync fullFileName, buffer, \"binary\", (err) ->\n        throw err if err\n        console.log \"Saved successfully.\"\n\n      __PUBLIC_FOLDER__ = fs.realpathSync(process.env.CLOUD_DIR + '/iconwriter/savedimg')\n      console.log 'NEW __PUBLIC_FOLDER__ is: ' + __PUBLIC_FOLDER__\n      fileTree = new Glob('*', {debug: false, cwd: __PUBLIC_FOLDER__}, (err, matches) -> )\n      console.log fileTree"]}